{"version":3,"sources":["components/controls/controls.tsx","components/slider/slider.tsx","components/controls/controls-data.ts","components/chart/chart.tsx","components/table/table.tsx","components/shudown-range/shutdown-range.tsx","components/simulator/use-generate-config.ts","components/simulator/data-generator.ts","components/simulator/optimal-weeks-generator.ts","components/headline/headline.tsx","components/simulator/simulator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Actions","useStyles","makeStyles","slider","width","Slider","title","onChange","percent","tooltip","props","classes","getValue","value","undefined","Grid","container","direction","alignItems","spacing","Tooltip","placement","item","Typography","min","className","aria-labelledby","valueLabelDisplay","valueLabelFormat","onChangeCommitted","event","name","max","id","variant","sliders","step","defaultValue","initialState","reduce","sliderValues","infectionStartDate","Date","initialNumberOfCases","totalPopulation","totalHospitalBeds","theme","createStyles","root","paddingTop","paddingLeft","paddingRight","divider","marginTop","marginBottom","reducer","state","action","type","CHANGE_SLIDER_VALUE","sliderName","CHANGE_START_DATE","CHANGE_POPULATION","CHANGE_BEDS","Number","CHANGE_INITIAL_NUMBER_OF_CASES","Controls","React","useReducer","dispatch","useEffect","onSliderChange","Paper","elevation","TextField","label","target","map","key","padding","chartContainer","height","Chart","config","containerProps","highcharts","Highcharts","options","gridContainer","renderGridCell","data","isShutdown","cellElement","bgColor","text","Table","columns","customizeCellValue","cellInfo","shortNum","elementAttr","class","allowColumnReordering","allowColumnResizing","showRowLines","dataSource","showBorders","c","dataField","cellRender","customizeText","mode","marginLeft","marginLeftAuto","ShutdownRange","shutdownWeeks","startDate","computeOptimalWeeks","useState","ranges","setState","isWeekView","setIsWeekView","setShutdownState","shutdown","range","start","differenceInWeeks","end","i","Array","fill","getShutdownWeeks","currentRange","length","push","addWeeks","getShutdownRanges","removeRange","idx","splice","changeRange","date","onWeekToggle","evt","checked","justify","Checkbox","color","week","Switch","IconButton","onClick","aria-label","Button","startIcon","rangeStart","_","Week","params","weekStartDate","weekNum","healthy","newInfected","totalInfected","currentlyInfected","recovered","dead","hospitalized","Object","assign","this","generateData","controls","R0","shutdownR0","mortalityRate","mortalityRateOverflow","hospitalizationRate","lastWeekNum","weeks","shutdowns","r","fractionHealthy","mortality","weightedAverage","Math","floor","p0","p1","w0","w1","CHANGE_CONTROL","CHANGE_SHUTDOWN","generateChartConfig","weeksToGo","currentWeekNum","differenceInCalendarWeeks","getWeeksToGo","series","forEach","obj","keys","visible","x","y","values","createSeries","subtitle","yAxis","xAxis","gridLineWidth","plotBands","s","from","to","plotLines","plotOptions","line","lineWidth","formatter","format","console","log","getOptimalWeeks","currentNewInfected","shutdownsToZero","ceil","getDeprecatingOptimalWeeks","current","next","next2","computeNextWeek","prev","prev2","prev3","result","round","flexGrow","Headline","grow","flexBasis","display","content","flex","minHeight","TABLE_COLUMNS","initialShutdownWeeks","Simulator","useGenerateConfig","onControlChange","onShutdownChange","optimalWeeks","setOptimalWeeks","utils","DateFnsUtils","numWeeks","isNaN","menuButton","marginRight","App","AppBar","position","Toolbar","edge","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a96969b1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport { Button, Typography } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport {Slider} from '../slider/slider';\nimport {sliders} from './controls-data';\n\nexport interface ControlState {\n    R0?: number;\n    shutdownR0?: number;\n    mortalityRate?: number;\n    mortalityRateOverflow?: number;\n    hospitalizationRate?: number;\n    hospitalStayInWeeks?: number;\n    infectionStartDate?: Date;\n    initialNumberOfCases?: number;\n    totalPopulation?: number;\n    totalHospitalBeds?: number;\n}\n\ninterface Props {\n    onChange?: (controls: ControlState) => void;\n}\n\nenum Actions {\n    CHANGE_SLIDER_VALUE,\n    CHANGE_START_DATE,\n    CHANGE_POPULATION,\n    CHANGE_INITIAL_NUMBER_OF_CASES,\n    CHANGE_BEDS\n}\n\nconst initialState: ControlState = sliders.reduce((sliderValues, slider) => {\n    sliderValues[slider.name] = slider.defaultValue;\n    return sliderValues;\n}, {});\ninitialState.infectionStartDate = new Date('1/1/2020');\ninitialState.initialNumberOfCases = 5;\ninitialState.totalPopulation = 331000000;\ninitialState.totalHospitalBeds = 1000000;\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingTop: theme.spacing(4),\n      paddingLeft: theme.spacing(6),\n      paddingRight: theme.spacing(2),\n      width: 250\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    }\n  }),\n);\n\n\n\nfunction reducer(state, action) {\n    switch(action.type) {\n        case Actions.CHANGE_SLIDER_VALUE:\n            return {\n                ...state,\n                [action.sliderName]: action.value\n            }\n        case Actions.CHANGE_START_DATE:\n            return {\n                ...state,\n                infectionStartDate: action.infectionStartDate\n            }\n        case Actions.CHANGE_POPULATION:\n            return {\n                ...state,\n                totalPopulation: action.value\n            }\n        case Actions.CHANGE_BEDS:\n            return {\n                ...state,\n                totalHospitalBeds: Number(action.value)\n            }\n        case Actions.CHANGE_INITIAL_NUMBER_OF_CASES:\n            return {\n                ...state,\n                initialNumberOfCases: Number(action.value)\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const Controls: React.FC<Props> = ({ onChange }) => {\n    const classes = useStyles();\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    useEffect(() => {\n        onChange(state);\n    }, [state]);\n\n    const onSliderChange = (sliderName: string, value?) => {\n        dispatch({\n            type: Actions.CHANGE_SLIDER_VALUE,\n            sliderName,\n            value\n        });\n    }\n\n    const onDateChange = (infectionStartDate: Date) => {\n        dispatch({\n            type: Actions.CHANGE_START_DATE,\n            infectionStartDate\n        })\n    }\n\n    const onPopulationChange = (event) => {\n        dispatch({\n            type: Actions.CHANGE_POPULATION,\n            value: event.target.value\n        })\n    }\n\n    const onNumberOfCasesChanged = (event) => {\n        dispatch({\n            type: Actions.CHANGE_INITIAL_NUMBER_OF_CASES,\n            value: event.target.value\n        })\n    }\n\n    const onBedsChanged = (event) => {\n        dispatch({\n            type: Actions.CHANGE_BEDS,\n            value: event.target.value\n        })\n    }\n\n    return (\n            <Paper elevation={3} className={classes.root}>\n                <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n                    <Grid item>\n                        <Typography>Control Values</Typography>\n                    </Grid>\n                    <Grid item>\n                        <TextField label=\"Total population\"\n                            onChange={onPopulationChange}\n                            value={state.totalPopulation}></TextField>\n                    </Grid>\n                    <Grid item>\n                        <KeyboardDatePicker \n                            onChange={onDateChange}\n                            variant=\"inline\" value={state.infectionStartDate} label='Start date'></KeyboardDatePicker>\n                    </Grid>\n                    <Grid item>\n                        <TextField label=\"Initial infected people\"\n                            onChange={onNumberOfCasesChanged}\n                            value={state.initialNumberOfCases}></TextField>\n                    </Grid>\n                    <Grid item>\n                        <TextField label=\"Total hospital beds\"\n                            onChange={onBedsChanged}\n                            value={state.totalHospitalBeds}></TextField>\n                    </Grid>\n                    {sliders.map(slider => <Grid item key={slider.name}>\n                        <Slider {...slider} onChange={onSliderChange}></Slider>\n                    </Grid>)}\n                </Grid>\n            </Paper>\n               \n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport {Slider as MaterialSlider, SliderProps as MaterialSliderProps} from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { Grid } from '@material-ui/core';\nimport './slider.css';\n\ninterface SliderProps {\n    title: string;\n    percent?: boolean;\n    onChange: (name: string, value: number) => void;\n    tooltip?: string;\n}\n\nconst useStyles = makeStyles({\n    slider: {\n      width: 150,\n    },\n  });\n  \n\nexport const Slider: React.FC<SliderProps & Omit<MaterialSliderProps, 'onChange'>> = ({title, onChange, percent = false, tooltip, ...props}) => {\n    const classes = useStyles()\n\n    const getValue = (value: number | undefined) => {\n        if(value === undefined) {\n            return '';\n        }\n\n        if(percent) {\n            return `${value}%`;\n        }\n        return value;\n    }\n\n    const onSliderChange = (event, value?) => {\n        onChange(props.name, value);\n    }\n\n    return (\n        <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={0}>\n            <Tooltip title={tooltip} placement=\"right\">\n                <Grid item container direction=\"row\" spacing={1} alignItems=\"center\">\n                    <Grid item>\n                        <Typography>\n                            {getValue(props.min)}\n                        </Typography>\n                    </Grid>\n                    <Grid item className={classes.slider}>\n                        <MaterialSlider\n                            aria-labelledby=\"discrete-slider\"\n                            valueLabelDisplay=\"on\"\n                            valueLabelFormat={getValue}\n                            onChangeCommitted={onSliderChange}\n                            {...props}\n                        />\n                    </Grid>\n                    <Grid>\n                        <Typography>\n                            {getValue(props.max)}\n                        </Typography>\n                    </Grid>\n                    \n                </Grid>\n            </Tooltip>\n\n            <Grid item>\n                <Typography id=\"discrete-slider\" variant=\"caption\">\n                    {title}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}","export const sliders = [\n    {\n        title: 'Average spread (R0)',\n        name: 'R0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 2.2,\n        tooltip: 'Average number of people a single person infects.'\n    },\n    {\n        title: 'Average spread shutdown (R0)',\n        name: 'shutdownR0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 1.05,\n        tooltip: 'Average number of people a single person infects\\n when we are in a shutdown.'\n    },\n    {\n        title: 'Mortality Rate',\n        name: 'mortalityRate',\n        min: 0,\n        max: 5.0,\n        step: 0.1,\n        defaultValue: 0.5,\n        percent: true,\n        tooltip: 'Percentage of people who die due to the disease.'\n    },\n    {\n        title: 'Mortality Rate Overflow',\n        name: 'mortalityRateOverflow',\n        min: 0,\n        max: 7.0,\n        step: 0.5,\n        defaultValue: 3.0,\n        percent: true,\n        tooltip: 'Percentage of people who die due to the disease, when the medical system is over stressed.'\n    },\n    {\n        title: 'Hospitalization Rate',\n        name: 'hospitalizationRate',\n        min: 0,\n        max: 25,\n        step: 1,\n        defaultValue: 15,\n        percent: true,\n        tooltip: 'Percentage of people who need hospitalization.'\n    },\n    {\n        title: 'Hospital stay in weeks',\n        name: 'hospitalStayInWeeks',\n        min: 0,\n        max: 2,\n        step: 0.1,\n        defaultValue: 0.3,\n        tooltip: 'Number of weeks a patient needs to stay in the hospital for.'\n    }\n];","import React from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(4),\n      width: '100%'\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    chartContainer: {\n        height: '100%'\n    }\n  }),\n);\n\ninterface Props {\n    config: any;\n}\n\nexport const Chart: React.FC<Props> = ({ config }) => {\n    const classes = useStyles();\n\n    return <Paper elevation={3} className={classes.root}>\n        <HighchartsReact\n            containerProps = {{ className: classes.chartContainer }}\n            highcharts={Highcharts}\n            options={config}\n        />\n    </Paper>;\n}","import React from 'react';\nimport DataGrid, { Scrolling, Column } from 'devextreme-react/data-grid';\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\nimport shortNum from 'short-number';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(4),\n      width: '100%',\n      height: '100%'\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    gridContainer: {\n        height: 600\n    }\n  }),\n);\n\ninterface Props {\n    columns: string[];\n    data: {[key: string]: number | string}[]\n}\n\nconst renderGridCell = (data) => {\n    if(data.data.isShutdown) {\n        data.cellElement.bgColor = '#ffcccb';\n    }\n\n    return data.text;\n}\n\nexport const Table: React.FC<Props> = ({ columns, data }) => {\n    const classes = useStyles();\n\n    const customizeCellValue = (cellInfo) => {\n        if(typeof cellInfo.value === 'number') {\n            return shortNum(cellInfo.value) + '';\n        }\n\n        return cellInfo.value + '';\n    }\n\n    return <Paper elevation={3} className={classes.root}>\n        <DataGrid\n            elementAttr={{\n                class: classes.gridContainer\n            }}\n            allowColumnReordering={true}\n            allowColumnResizing={true}\n            showRowLines={true}\n            // @ts-ignore\n            dataSource={data}\n            showBorders={true}>\n            {columns.map(c => <Column \n                dataField={c}\n                cellRender={renderGridCell}\n                customizeText={customizeCellValue}/>)}\n            <Scrolling mode=\"virtual\" />\n        </DataGrid>\n    </Paper>\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\nimport { addWeeks, eachWeekOfInterval, differenceInWeeks } from 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport { Button, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport Paper from '@material-ui/core/Paper';\nimport Switch from '@material-ui/core/Switch';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\nexport interface Range {\n    start: Date,\n    end: Date\n};\n\nexport type ShutdownRangeState = {\n    shutdownWeeks: boolean[];\n    ranges: Range[]\n};\n\ninterface Props {\n    onChange: (ranges: ShutdownRangeState) => void;\n    computeOptimalWeeks: () => void;\n    shutdownWeeks?: boolean[];\n    startDate?: Date;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(4)\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    },\n    marginLeft: {\n        marginLeft: theme.spacing(2)\n    },\n    marginLeftAuto: {\n        marginLeft: 'auto'\n    }\n  }),\n);\n\nexport const ShutdownRange: React.FC<Props> = ({ shutdownWeeks, startDate, computeOptimalWeeks, onChange }) => {\n    const classes = useStyles();\n    const [state, setState] = React.useState({ shutdownWeeks: [], ranges: []})\n    const [isWeekView, setIsWeekView] = React.useState(false);\n\n    const setShutdownState = (ranges: Range[], shutdownWeeks: boolean[]) => {\n        if(!shutdownWeeks) {\n            shutdownWeeks = getShutdownWeeks(ranges, startDate);\n        }\n\n        if(!ranges) {\n            ranges = getShutdownRanges(startDate, shutdownWeeks);\n        }\n\n        setState({ranges, shutdownWeeks});\n    }\n\n    React.useEffect(() => {\n        onChange(state);\n    }, [state]);\n\n    React.useEffect(() => {\n        if((!shutdownWeeks || !startDate)) {\n            return;\n        }\n        setShutdownState(null, shutdownWeeks);\n    }, [shutdownWeeks, startDate]);\n\n    const addRange = () => {\n        let rangeStart = state.ranges[state.ranges.length - 1]?.end || new Date();\n        const range = {\n            start: rangeStart,\n            end: rangeStart\n        }\n        setShutdownState([\n            ...state.ranges,\n            range\n        ], null);\n    }\n\n    const removeRange = (idx: number) => () => {\n        state.ranges.splice(idx, 1);\n        setShutdownState([...state.ranges], null);\n    }\n\n    const changeRange = range => type => date => {\n        range[type] = date;\n        if(type === 'start' && range.end < date) {\n            range.end = date;\n        }\n        setShutdownState([...state.ranges], null);\n    }\n\n    const onWeekViewToggle = (evt) => {\n        setIsWeekView(evt.target.checked);\n    }\n\n    const onWeekToggle = (evt) => {\n        state.shutdownWeeks[Number(evt.target.id)] = evt.target.checked;\n        setShutdownState(null, [...state.shutdownWeeks]);\n    }\n\n    const renderRanges = () => state.ranges.map((range, idx) => <Grid container item direction=\"row\" spacing={4} alignItems=\"center\">\n        <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('start')}  value={range.start} label='Start'></KeyboardDatePicker></Grid>\n        <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('end')}  value={range.end} label='End'></KeyboardDatePicker></Grid>\n        <Grid item>\n            <IconButton onClick={removeRange(idx)} aria-label=\"delete\">\n                <DeleteIcon />\n            </IconButton>\n        </Grid>\n    </Grid>);\n\n    const renderWeeks = () => <Grid item container direction=\"row\">\n        {state.shutdownWeeks.map((week, idx) => \n            <Grid item>\n                <Grid container alignItems=\"center\">\n                    <Switch color=\"primary\" id={idx + ''} checked={week} onChange={onWeekToggle}></Switch>\n                    <Typography variant=\"caption\">{`Week ${idx + 1}`}</Typography>\n                </Grid>\n            </Grid>\n        )}\n    </Grid>\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={2}>\n                <Grid container alignItems=\"center\" justify=\"space-between\">\n                    <Tooltip title=\"Weeks when we will have a shutdown.\">\n                        <Typography className={classes.marginBottom}>Shutdown Dates</Typography>\n                    </Tooltip>\n                    <Grid item>\n                        <Grid container alignItems=\"center\">\n                            <Checkbox color=\"primary\" onChange={onWeekViewToggle}></Checkbox>\n                            <Typography variant=\"body2\">Week view</Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                {(isWeekView) ? renderWeeks() : renderRanges()}\n                <Grid container item className={classes.marginTop} spacing={2} alignItems=\"center\">\n                    <Button variant=\"contained\" startIcon={<AddIcon />} onClick={addRange}>Add</Button>\n                    <Button variant=\"contained\" className={classes.marginLeft}\n                        startIcon={<RotateLeftIcon />} onClick={_ => setShutdownState([], null)}>Reset</Button>\n                    <Button className={classes.marginLeft}\n                        variant=\"contained\" startIcon={<DateRangeIcon />} onClick={computeOptimalWeeks}>Optimize Shutdowns</Button>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\n\nfunction getShutdownRanges(startDate: Date, shutdownWeeks: boolean[]): Range[] {\n    let ranges = [];\n    let currentRange = null;\n    for(let i = 0; i<shutdownWeeks.length; i++) {\n        if(!shutdownWeeks[i] && currentRange) {\n            ranges.push(currentRange);\n            currentRange = null;\n        }\n\n        if(shutdownWeeks[i]) {\n            if(currentRange) {\n                currentRange.end = addWeeks(currentRange.end, 1);\n            } else {\n                currentRange = {\n                    start: addWeeks(startDate, i),\n                    end: addWeeks(startDate, i+1)\n                }\n            }\n        }\n    }\n    if(currentRange) {\n        ranges.push(currentRange);\n    }\n\n    return ranges;\n}\n\nfunction getShutdownWeeks(ranges, startDate) {\n    return ranges.reduce((shutdown, range) => {\n        let start = differenceInWeeks(range.start, startDate);\n        let end = differenceInWeeks(range.end, startDate);\n        for(let i = start; i < end; i++) {\n            shutdown[i] = true;\n        }\n        return shutdown;\n    }, Array(104).fill(false));\n}\n\nexport function getNumShutdownWeeks(shutdownWeeks: boolean[]) {\n    return shutdownWeeks.reduce((numWeeks, shutdown) => {\n        return numWeeks + ((shutdown) ? 1 : 0);\n    }, 0)\n}","import React, { useReducer, useEffect } from 'react';\nimport shortNum from 'short-number';\nimport { format, differenceInCalendarWeeks } from 'date-fns';\nimport { SimulatorInputState, generateData} from './data-generator';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\nenum Actions {\n    CHANGE_CONTROL,\n    CHANGE_SHUTDOWN\n}\n\nconst reducer = (state: SimulatorInputState, action) => {\n    switch(action.type) {\n        case Actions.CHANGE_CONTROL:\n            return {\n                ...state,\n                controls: action.controls\n            }\n        case Actions.CHANGE_SHUTDOWN:\n            return {\n                ...state,\n                shutdowns: action.shutdowns\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const useGenerateConfig = (): [SimulatorInputState, any, any, any] => {\n    const [state, dispatch] = useReducer(reducer, {\n        controls: {},\n        shutdowns: {\n            ranges: [],\n            shutdownWeeks: []\n        }\n    });\n    return [\n        state,\n        generateChartConfig(state),\n        (controls) => dispatch({type: Actions.CHANGE_CONTROL, controls}),\n        (shutdowns) => dispatch({type: Actions.CHANGE_SHUTDOWN, shutdowns})\n    ];\n}\n\n\n\n\nfunction generateChartConfig(state: SimulatorInputState) { \n    // TODO: Generate chart config here.\n    let {weeks, lastWeekNum} = generateData(state);\n    let weeksToGo = getWeeksToGo(lastWeekNum, state.controls.infectionStartDate);\n    let series = createSeries(weeks);\n    const options = {\n        subtitle: {\n            text: ''\n        },\n        title: {\n          text: ``,\n        },\n        yAxis: {\n            type: 'logarithmic',\n            title: {\n                text: 'Number of people'\n            },\n        },\n        xAxis: {\n            type: 'datetime',\n            title: {\n                text: 'Date'\n            },\n            gridLineWidth: 1,\n            plotBands: createShutdownBands(state.shutdowns.ranges),\n            plotLines: [{\n                value: weeks[lastWeekNum]?.weekStartDate,\n                color: '#013220'\n            }]\n        },\n        plotOptions: {\n            line: {\n                lineWidth: 5\n            }\n        },\n        tooltip: {\n            formatter: function () {\n                return `<b>${this.series.name}</b>:${shortNum(this.y)} <br>` +\n                    `${format(this.x, 'do MMM y')}`;\n            }\n        },\n        series\n    }\n\n    console.log(options);\n    return {\n        config: options,\n        weeks,\n        weeksToGo\n    };\n}\n\nfunction createShutdownBands(shutdowns: {start: Date, end: Date}[]) {\n    return shutdowns.map(s => {\n        return {\n            color: '#ffcccb',\n            from: s.start,\n            to: s.end\n        };\n    })\n}\n\n\nfunction createSeries(data) {\n    let series = {};\n    data.forEach(obj => {\n        Object.keys(obj).forEach(key => {\n            series[key] = series[key] || {name: key, data: [], visible: false};\n            series[key].data.push({\n                x: obj.weekStartDate,\n                y: obj[key]\n            });\n        });\n    });\n    delete series['week'];\n    delete series['weekNum'];\n    delete series['healthy'];\n    delete series['weekStartDate'];\n    delete series['recovered'];\n    delete series['isShutdown'];\n    delete series['currentlyInfected'];\n\n    series['hospitalized'].visible = true;\n    series['dead'].visible = true;\n    series['newInfected'].visible = true;\n    return Object.values(series);\n}\n\nfunction getWeeksToGo(lastWeekNum, startDate) {\n    const currentWeekNum = differenceInCalendarWeeks(new Date(), startDate);\n    return lastWeekNum - currentWeekNum;\n}","import { addWeeks, isWithinInterval } from 'date-fns';\nimport { ControlState } from '../controls/controls';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\nexport interface SimulatorInputState {\n    controls: ControlState;\n    shutdowns: ShutdownRangeState;\n}\n\nexport class Week {\n    weekStartDate: Date;\n    weekNum: number;\n    healthy: number = 0;\n    newInfected: number = 0;\n    totalInfected: number = 0;\n    currentlyInfected = 0;\n    recovered = 0;\n    dead = 0;\n    hospitalized = 0;\n    isShutdown: boolean = false;\n\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n\nexport function generateData(state: SimulatorInputState) {\n    let {\n        totalPopulation,\n        infectionStartDate,\n        R0,\n        shutdownR0,\n        mortalityRate,\n        mortalityRateOverflow,\n        initialNumberOfCases,\n        hospitalizationRate,\n        totalHospitalBeds } = state.controls;\n    mortalityRate = mortalityRate / 100;\n    mortalityRateOverflow = mortalityRateOverflow / 100;\n    hospitalizationRate = hospitalizationRate / 100;\n\n    let weeks = [new Week({\n        weekStartDate: infectionStartDate,\n        weekNum: 0,\n        healthy: totalPopulation - initialNumberOfCases,\n        newInfected: initialNumberOfCases,\n        totalInfected: initialNumberOfCases,\n        currentlyInfected: initialNumberOfCases,\n        recovered: 0,\n        dead: 0,\n        hospitalized: 0\n    })];\n    let lastWeekNum;\n\n    for(let i=1; i<104; i++) {\n        weeks[i] = new Week();\n        weeks[i].weekStartDate = addWeeks(infectionStartDate, i);\n        weeks[i].weekNum = i;\n        weeks[i].isShutdown = state.shutdowns.shutdownWeeks[i];\n        let r = (weeks[i].isShutdown)\n            ? shutdownR0 \n            : R0;\n\n        let fractionHealthy = (weeks[i-1].healthy) / totalPopulation;\n        let mortality = (weeks[i-1].hospitalized < totalHospitalBeds)\n            ? mortalityRate\n            : weightedAverage(mortalityRate, mortalityRateOverflow,\n                totalHospitalBeds, weeks[i-1].hospitalized - totalHospitalBeds);\n\n        weeks[i].newInfected = Math.floor(weeks[i-1].newInfected * r * fractionHealthy);\n        weeks[i].currentlyInfected = Math.floor(weeks[i].newInfected + weeks[i-1].newInfected\n                + ((i >= 2) ? weeks[i-2].newInfected : 0));\n        weeks[i].totalInfected = weeks[i-1].totalInfected + weeks[i].newInfected;\n\n        // 3 weeks later patients either die or recover.\n        if(i >= 3) {\n            weeks[i].dead = Math.floor(weeks[i-1].dead + weeks[i - 3].newInfected * mortality);\n            weeks[i].recovered = Math.floor(weeks[i-1].recovered + (weeks[i -3].newInfected *  ( 1 - mortality)));\n        }\n        if(i > 2) {\n            weeks[i].hospitalized =  Math.floor(weeks[i -2].newInfected * hospitalizationRate);\n        }\n        weeks[i].healthy = totalPopulation - (weeks[i].currentlyInfected + weeks[i].recovered + weeks[i].dead); \n\n        if(weeks[i].currentlyInfected === 0 && !lastWeekNum) {\n            lastWeekNum = i;\n        }\n    }\n\n    return {\n        lastWeekNum,\n        weeks\n    };\n}\n\nexport function weightedAverage(p0: number, p1: number, w0: number, w1: number) {\n    return ((p0 * w0) + (p1 * w1)) / (w0 + w1);\n}\n\nfunction isShutdown(week, shutdowns) {\n    try {\n        return  shutdowns.some(shutdown => isWithinInterval(week, shutdown));\n    } catch {\n        return false;\n    }\n}","import { ControlState } from '../controls/controls';\nimport { Week, weightedAverage, generateData } from './data-generator';\nimport { differenceInCalendarWeeks } from 'date-fns';\n\nexport function getOptimalWeeks(state: ControlState) {\n    const {\n        totalPopulation,\n        totalHospitalBeds,\n        shutdownR0,\n        infectionStartDate,\n        initialNumberOfCases\n    } = state;\n\n    let weeks = [new Week({\n        newInfected: initialNumberOfCases,\n        totalInfected: initialNumberOfCases,\n        currentlyInfected: initialNumberOfCases,\n        healthy: totalPopulation - initialNumberOfCases\n    })];\n\n    let shutdown = Array(104).fill(false);\n\n    if(shutdownR0 < 1) {\n        return getDeprecatingOptimalWeeks(state);\n    }\n\n\n    for(let i = 1; i< 104; i++) {\n        let current: Week, next: Week, next2: Week;\n        current = computeNextWeek(state, false,\n            weeks[i - 1], (i >= 2) ? weeks[i-2] : null, (i >= 3) ? weeks[i - 3] : null);\n        next = computeNextWeek(state, true,\n            current, weeks[i-1], (i >= 2) ? weeks[i-2] : null);\n        next2 = computeNextWeek(state, true,\n            next, current, weeks[i-1]);\n\n        if(current.hospitalized > totalHospitalBeds ||\n            next.hospitalized > totalHospitalBeds ||\n            next2.hospitalized > totalHospitalBeds) {\n                shutdown[i] = true;\n                weeks[i] = computeNextWeek(state, shutdown[i],\n                    weeks[i - 1], (i >= 2) ? weeks[i -2] : null, (i >= 3) ? weeks[i - 3] : null);\n        } else {\n            shutdown[i] = false;\n            weeks[i] = current;\n        }\n    }\n\n    return shutdown;\n}\n\nfunction computeNextWeek(state: ControlState, shutdown: boolean, prev: Week, prev2: Week, prev3: Week): Week {\n    let {\n        R0,\n        shutdownR0,\n        totalPopulation,\n        totalHospitalBeds,\n        mortalityRate,\n        mortalityRateOverflow,\n        hospitalizationRate\n    } = state;\n    mortalityRate = mortalityRate / 100;\n    mortalityRateOverflow = mortalityRateOverflow / 100;\n    hospitalizationRate = hospitalizationRate / 100;\n\n    let result: Week = new Week();\n    const r = (shutdown) ? shutdownR0 : R0;\n    const fractionHealthy = prev.healthy / totalPopulation;\n\n    // Mortality depends on how much overflow there is in the hospitals compared capacity\n    let mortality = (prev.hospitalized < totalHospitalBeds) ? mortalityRate :\n        weightedAverage(mortalityRate, mortalityRateOverflow,\n        totalHospitalBeds, prev.hospitalized - totalHospitalBeds);\n    \n    result.newInfected = Math.round(prev.newInfected * r * fractionHealthy);\n    // Last 2 week + current week's newly infected are still infected. \n    result.currentlyInfected = result.newInfected + prev.newInfected + ((prev2 != null) ? prev2.newInfected : 0);\n    result.totalInfected = prev.totalInfected + result.newInfected;\n    // 3 weeks later patients either die or recover.\n    if (prev3 != null) {\n        result.dead = prev.dead + prev3.newInfected * mortality;\n        result.recovered = prev.recovered + (prev3.newInfected *  ( 1 - mortality));\n    }\n    // We are considering that patients are in hopsital in their third week.\n    if (prev2 != null) {\n        result.hospitalized =  prev2.newInfected * hospitalizationRate;\n    } \n    result.healthy = totalPopulation - (result.currentlyInfected + result.recovered + result.dead);\n    return result; \n}\n\nfunction getDeprecatingOptimalWeeks(state: ControlState) {\n    let {\n        R0,\n        shutdownR0,\n        totalPopulation,\n        totalHospitalBeds,\n        infectionStartDate,\n        mortalityRateOverflow,\n        hospitalizationRate\n    } = state;\n    let { weeks } = generateData({ controls: state, shutdowns: {shutdownWeeks: [], ranges: []}});\n    let currentWeekNum = differenceInCalendarWeeks(new Date(), infectionStartDate);\n    let currentNewInfected = weeks[currentWeekNum - 1].newInfected;\n\n    let shutdownsToZero = Math.ceil(-Math.log(currentNewInfected) / Math.log(shutdownR0));\n\n    let shutdown = Array(104).fill(false);\n    for(let i = currentWeekNum; i<currentWeekNum + shutdownsToZero - 1; i++) {\n        shutdown[i] = true;\n    }\n\n    return shutdown;\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\ninterface Props {\n    title: string;\n    value: string;\n    tooltip: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(2),\n        paddingRight: theme.spacing(4),\n        flexGrow: 1\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    },\n    marginLeft: {\n        marginLeft: theme.spacing(2)\n    },\n    marginLeftAuto: {\n        marginLeft: 'auto'\n    }\n  }),\n);\n\nexport const Headline: React.FC<Props> = ({ title, value, tooltip }) => {\n    const classes = useStyles();\n\n    return <Paper className={classes.root} elevation={3}>\n        <Tooltip title={tooltip}>\n            <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={3}>\n                <Grid item>\n                    <Typography variant=\"body1\">{title}</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h5\">{value}</Typography>\n                </Grid>\n            </Grid>\n        </Tooltip>\n    </Paper>\n}","import React from 'react';\nimport 'date-fns';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport {Controls} from '../controls/controls';\nimport {Chart} from '../chart/chart';\nimport { Table } from '../table/table';\nimport {ShutdownRange, getNumShutdownWeeks} from '../shudown-range/shutdown-range';\nimport {useGenerateConfig} from './use-generate-config';\nimport {getOptimalWeeks} from './optimal-weeks-generator';\nimport {\n    MuiPickersUtilsProvider,\n } from '@material-ui/pickers';\nimport shortNum from 'short-number';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Headline } from '../headline/headline';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    grow: {\n        flexGrow: 1,\n        flexBasis: 0,\n        display: 'flex'\n    },\n    content: {\n        flex: '0 0 700px',\n        minHeight: 0,\n        display: 'flex',\n        marginBottom: theme.spacing(2)\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    }\n  }),\n);\n\nconst TABLE_COLUMNS = ['weekNum', 'healthy', 'newInfected', 'totalInfected', 'currentlyInfected', 'dead', 'hospitalized'];\nconst initialShutdownWeeks = Array(104).fill(false);\ninitialShutdownWeeks[10] = true;\ninitialShutdownWeeks[11] = true;\ninitialShutdownWeeks[12] = true;\n\nexport const Simulator: React.FC = () => {\n    const classes = useStyles();\n    const [\n        state, \n        {config, weeks, weeksToGo},\n        onControlChange, \n        onShutdownChange] = useGenerateConfig();\n    const [optimalWeeks, setOptimalWeeks] = React.useState<boolean[]>(initialShutdownWeeks);\n\n    const computeOptimalWeeks = () => {\n        setOptimalWeeks(getOptimalWeeks(state.controls));\n    }\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container spacing={2} direction='row'>\n                <Grid item>\n                    <Controls onChange={onControlChange}></Controls>\n                </Grid>\n                <Grid item direction=\"column\" className={classes.grow} spacing={2}>\n                    <Grid item className={classes.marginBottom}>\n                        <ShutdownRange\n                            shutdownWeeks={optimalWeeks}\n                            startDate={state.controls.infectionStartDate}\n                            computeOptimalWeeks={computeOptimalWeeks}\n                            onChange={onShutdownChange}></ShutdownRange>\n                    </Grid>\n                    <Grid item container\n                        direction=\"row\" className={classes.marginBottom} spacing={2}>\n                        <Grid item className={classes.grow}> \n                            <Headline title=\"Total Shutdown\"\n                                tooltip=\"Total number of weeks of shutdown\"\n                                value={`${getNumShutdownWeeks(state.shutdowns.shutdownWeeks)} weeks`}></Headline>\n                        </Grid>\n                        <Grid item className={classes.grow}> \n                            <Headline \n                                tooltip=\"Number of weeks to complete irradication of coronavirus.\"\n                                title=\"Time before we play again\" value={(!isNaN(weeksToGo)) ? `${weeksToGo} weeks` : `> 2 years`}></Headline>\n                        </Grid>\n                        <Grid item className={classes.grow}>\n                            <Headline title=\"Deaths\"\n                                 tooltip=\"Number of people expected to die.\"\n                                 value={shortNum(weeks[weeks.length - 1].dead)}></Headline>\n                        </Grid>\n                    </Grid>\n                    <Grid item className={classes.content}>\n                        <Chart config={config}></Chart>\n                    </Grid>\n                    <Grid item className={classes.content}>\n                        <Table\n                            columns={TABLE_COLUMNS} \n                            data={weeks}></Table>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport './App.css';\n\nimport {Simulator} from './components/simulator/simulator';\nimport { Container } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    container: {\n      paddingTop: theme.spacing(2)\n    }\n  }),\n);\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            COVID Simulator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth='lg' className={classes.container}>\n        <Simulator />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.        xssadsaasdasdasdasdasdasdasdasdasd\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}