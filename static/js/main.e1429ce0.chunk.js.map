{"version":3,"sources":["components/controls/controls.tsx","components/slider/slider.tsx","components/controls/controls-data.ts","components/chart/chart.tsx","components/table/table.tsx","components/shudown-range/shutdown-range.tsx","components/simulator/use-generate-config.ts","components/simulator/data-generator.ts","components/simulator/optimal-weeks-generator.ts","components/headline/headline.tsx","components/simulator/simulator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Actions","useStyles","makeStyles","slider","width","Slider","title","onChange","percent","tooltip","props","classes","getValue","value","undefined","Grid","container","direction","alignItems","spacing","Tooltip","placement","item","Typography","min","className","aria-labelledby","valueLabelDisplay","valueLabelFormat","onChangeCommitted","event","name","max","id","variant","sliders","step","defaultValue","initialState","reduce","sliderValues","infectionStartDate","Date","initialNumberOfCases","totalPopulation","totalHospitalBeds","theme","createStyles","root","paddingTop","paddingLeft","paddingRight","divider","marginTop","marginBottom","paddingBottom","textItemStyle","reducer","state","action","type","CHANGE_SLIDER_VALUE","sliderName","CHANGE_START_DATE","CHANGE_POPULATION","CHANGE_BEDS","Number","CHANGE_INITIAL_NUMBER_OF_CASES","Controls","React","useReducer","dispatch","useEffect","onSliderChange","Paper","elevation","style","TextField","label","target","map","key","chartContainer","height","Chart","config","containerProps","highcharts","Highcharts","options","gridContainer","renderGridCell","data","isShutdown","cellElement","bgColor","text","Table","columns","customizeCellValue","cellInfo","shortNum","elementAttr","class","allowColumnReordering","allowColumnResizing","showRowLines","dataSource","showBorders","c","dataField","cellRender","customizeText","mode","padding","marginLeft","marginLeftAuto","ShutdownRange","shutdownWeeks","startDate","computeOptimalWeeks","useState","ranges","setState","isWeekView","setIsWeekView","setShutdownState","shutdown","range","start","differenceInWeeks","end","i","Array","fill","getShutdownWeeks","currentRange","length","push","addWeeks","getShutdownRanges","removeRange","idx","splice","changeRange","date","onWeekToggle","evt","checked","justify","Checkbox","color","week","Switch","IconButton","onClick","aria-label","Button","startIcon","rangeStart","_","Week","params","weekStartDate","weekNum","healthy","newInfected","totalInfected","currentlyInfected","recovered","dead","hospitalized","Object","assign","this","generateData","controls","R0","shutdownR0","mortalityRate","mortalityRateOverflow","hospitalizationRate","hospitalStayInWeeks","lastWeekNum","weeks","shutdowns","r","fractionHealthy","mortality","weightedAverage","Math","floor","p0","p1","w0","w1","CHANGE_CONTROL","CHANGE_SHUTDOWN","generateChartConfig","weeksToGo","currentWeekNum","differenceInCalendarWeeks","getWeeksToGo","series","forEach","obj","keys","visible","x","y","values","createSeries","subtitle","yAxis","xAxis","gridLineWidth","plotBands","s","from","to","plotLines","plotOptions","line","lineWidth","formatter","format","console","log","getOptimalWeeks","currentNewInfected","shutdownsToZero","ceil","getDeprecatingOptimalWeeks","current","next","next2","computeNextWeek","prev","prev2","prev3","result","round","flexGrow","Headline","grow","flexBasis","minHeight","contentContainer","flex","content","display","flexDirection","TABLE_COLUMNS","initialShutdownWeeks","Simulator","useGenerateConfig","onControlChange","onShutdownChange","optimalWeeks","setOptimalWeeks","isTableView","setIsTableView","utils","DateFnsUtils","numWeeks","isNaN","wrap","menuButton","marginRight","urlParams","qs","parse","window","location","search","App","isEmbed","embed","AppBar","position","Toolbar","edge","Container","maxWidth","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1429ce0.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport { Button, Typography } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport {Slider} from '../slider/slider';\nimport {sliders} from './controls-data';\n\nexport interface ControlState {\n    R0?: number;\n    shutdownR0?: number;\n    mortalityRate?: number;\n    mortalityRateOverflow?: number;\n    hospitalizationRate?: number;\n    hospitalStayInWeeks?: number;\n    infectionStartDate?: Date;\n    initialNumberOfCases?: number;\n    totalPopulation?: number;\n    totalHospitalBeds?: number;\n}\n\ninterface Props {\n    onChange?: (controls: ControlState) => void;\n}\n\nenum Actions {\n    CHANGE_SLIDER_VALUE,\n    CHANGE_START_DATE,\n    CHANGE_POPULATION,\n    CHANGE_INITIAL_NUMBER_OF_CASES,\n    CHANGE_BEDS\n}\n\nconst initialState: ControlState = sliders.reduce((sliderValues, slider) => {\n    sliderValues[slider.name] = slider.defaultValue;\n    return sliderValues;\n}, {});\ninitialState.infectionStartDate = new Date('1/1/2020');\ninitialState.initialNumberOfCases = 5;\ninitialState.totalPopulation = 331000000;\ninitialState.totalHospitalBeds = 1000000;\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingTop: theme.spacing(4),\n      paddingLeft: theme.spacing(6),\n      paddingRight: theme.spacing(2),\n      width: 250\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    title: {\n        paddingBottom: 0\n    }\n  }),\n);\n\nconst textItemStyle = { paddingTop: 20, paddingBottom: 20 };\n\n\nfunction reducer(state, action) {\n    switch(action.type) {\n        case Actions.CHANGE_SLIDER_VALUE:\n            return {\n                ...state,\n                [action.sliderName]: action.value\n            }\n        case Actions.CHANGE_START_DATE:\n            return {\n                ...state,\n                infectionStartDate: action.infectionStartDate\n            }\n        case Actions.CHANGE_POPULATION:\n            return {\n                ...state,\n                totalPopulation: action.value\n            }\n        case Actions.CHANGE_BEDS:\n            return {\n                ...state,\n                totalHospitalBeds: Number(action.value)\n            }\n        case Actions.CHANGE_INITIAL_NUMBER_OF_CASES:\n            return {\n                ...state,\n                initialNumberOfCases: Number(action.value)\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const Controls: React.FC<Props> = ({ onChange }) => {\n    const classes = useStyles();\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    useEffect(() => {\n        onChange(state);\n    }, [state]);\n\n    const onSliderChange = (sliderName: string, value?) => {\n        dispatch({\n            type: Actions.CHANGE_SLIDER_VALUE,\n            sliderName,\n            value\n        });\n    }\n\n    const onDateChange = (infectionStartDate: Date) => {\n        dispatch({\n            type: Actions.CHANGE_START_DATE,\n            infectionStartDate\n        })\n    }\n\n    const onPopulationChange = (event) => {\n        dispatch({\n            type: Actions.CHANGE_POPULATION,\n            value: event.target.value\n        })\n    }\n\n    const onNumberOfCasesChanged = (event) => {\n        dispatch({\n            type: Actions.CHANGE_INITIAL_NUMBER_OF_CASES,\n            value: event.target.value\n        })\n    }\n\n    const onBedsChanged = (event) => {\n        dispatch({\n            type: Actions.CHANGE_BEDS,\n            value: event.target.value\n        })\n    }\n\n    return (\n            <Paper elevation={3} className={classes.root}>\n                <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n                    <Grid item style={{ paddingBottom: 0 }}>\n                        <Typography>Control Values</Typography>\n                    </Grid>\n                    <Grid item style={textItemStyle}>\n                        <TextField label=\"Total population\"\n                            onChange={onPopulationChange}\n                            value={state.totalPopulation}></TextField>\n                    </Grid>\n                    <Grid item style={textItemStyle}>\n                        <KeyboardDatePicker \n                            onChange={onDateChange}\n                            variant=\"inline\" value={state.infectionStartDate} label='Start date'></KeyboardDatePicker>\n                    </Grid>\n                    <Grid item style={textItemStyle}>\n                        <TextField label=\"Initial infected people\"\n                            onChange={onNumberOfCasesChanged}\n                            value={state.initialNumberOfCases}></TextField>\n                    </Grid>\n                    <Grid item>\n                        <TextField label=\"Total hospital beds\"\n                            onChange={onBedsChanged}\n                            value={state.totalHospitalBeds}></TextField>\n                    </Grid>\n                    {sliders.map(slider => <Grid item key={slider.name}>\n                        <Slider {...slider} onChange={onSliderChange}></Slider>\n                    </Grid>)}\n                </Grid>\n            </Paper>\n               \n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport {Slider as MaterialSlider, SliderProps as MaterialSliderProps} from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { Grid } from '@material-ui/core';\nimport './slider.css';\n\ninterface SliderProps {\n    title: string;\n    percent?: boolean;\n    onChange: (name: string, value: number) => void;\n    tooltip?: string;\n}\n\nconst useStyles = makeStyles({\n    slider: {\n      width: 150,\n    },\n  });\n  \n\nexport const Slider: React.FC<SliderProps & Omit<MaterialSliderProps, 'onChange'>> = ({title, onChange, percent = false, tooltip, ...props}) => {\n    const classes = useStyles()\n\n    const getValue = (value: number | undefined) => {\n        if(value === undefined) {\n            return '';\n        }\n\n        if(percent) {\n            return `${value}%`;\n        }\n        return value;\n    }\n\n    const onSliderChange = (event, value?) => {\n        onChange(props.name, value);\n    }\n\n    return (\n        <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={0}>\n            <Tooltip title={tooltip} placement=\"right\">\n                <Grid item container direction=\"row\" spacing={1} alignItems=\"center\">\n                    <Grid item>\n                        <Typography>\n                            {getValue(props.min)}\n                        </Typography>\n                    </Grid>\n                    <Grid item className={classes.slider}>\n                        <MaterialSlider\n                            aria-labelledby=\"discrete-slider\"\n                            valueLabelDisplay=\"on\"\n                            valueLabelFormat={getValue}\n                            onChangeCommitted={onSliderChange}\n                            {...props}\n                        />\n                    </Grid>\n                    <Grid>\n                        <Typography>\n                            {getValue(props.max)}\n                        </Typography>\n                    </Grid>\n                    \n                </Grid>\n            </Tooltip>\n\n            <Grid item>\n                <Typography id=\"discrete-slider\" variant=\"caption\">\n                    {title}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}","export const sliders = [\n    {\n        title: 'Average spread (R0)',\n        name: 'R0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 2.2,\n        tooltip: 'Average number of people a single person infects.'\n    },\n    {\n        title: 'Average spread shutdown (R0)',\n        name: 'shutdownR0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 1.05,\n        tooltip: 'Average number of people a single person infects\\n when we are in a shutdown.'\n    },\n    {\n        title: 'Mortality Rate',\n        name: 'mortalityRate',\n        min: 0,\n        max: 5.0,\n        step: 0.1,\n        defaultValue: 0.5,\n        percent: true,\n        tooltip: 'Percentage of people who die due to the disease.'\n    },\n    {\n        title: 'Mortality Rate Overflow',\n        name: 'mortalityRateOverflow',\n        min: 0,\n        max: 7.0,\n        step: 0.5,\n        defaultValue: 3.0,\n        percent: true,\n        tooltip: 'Percentage of people who die due to the disease, when the medical system is over stressed.'\n    },\n    {\n        title: 'Hospitalization Rate',\n        name: 'hospitalizationRate',\n        min: 0,\n        max: 25,\n        step: 1,\n        defaultValue: 15,\n        percent: true,\n        tooltip: 'Percentage of people who need hospitalization.'\n    },\n    {\n        title: 'Hospital stay in weeks',\n        name: 'hospitalStayInWeeks',\n        min: 0,\n        max: 3,\n        step: 0.5,\n        defaultValue: 1,\n        tooltip: 'Number of weeks a patient needs to stay in the hospital for.'\n    }\n];","import React from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    chartContainer: {\n        height: 600\n    }\n  }),\n);\n\ninterface Props {\n    config: any;\n}\n\nexport const Chart: React.FC<Props> = ({ config }) => {\n    const classes = useStyles();\n\n    return <HighchartsReact\n            containerProps = {{ className: classes.chartContainer }}\n            highcharts={Highcharts}\n            options={config}\n      />;\n}","import React from 'react';\nimport DataGrid, { Scrolling, Column } from 'devextreme-react/data-grid';\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\nimport shortNum from 'short-number';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%'\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    gridContainer: {\n        height: 600\n    }\n  }),\n);\n\ninterface Props {\n    columns: string[];\n    data: {[key: string]: number | string}[]\n}\n\nconst renderGridCell = (data) => {\n    if(data.data.isShutdown) {\n        data.cellElement.bgColor = '#ffcccb';\n    }\n\n    return data.text;\n}\n\nexport const Table: React.FC<Props> = ({ columns, data }) => {\n    const classes = useStyles();\n\n    const customizeCellValue = (cellInfo) => {\n        if(typeof cellInfo.value === 'number') {\n            return shortNum(cellInfo.value) + '';\n        }\n\n        return cellInfo.value + '';\n    }\n\n    return <div className={classes.root}>\n        <DataGrid\n            elementAttr={{\n                class: classes.gridContainer\n            }}\n            allowColumnReordering={true}\n            allowColumnResizing={true}\n            showRowLines={true}\n            // @ts-ignore\n            dataSource={data}\n            showBorders={true}>\n            {columns.map(c => <Column \n                dataField={c}\n                cellRender={renderGridCell}\n                customizeText={customizeCellValue}/>)}\n            <Scrolling mode=\"virtual\" />\n        </DataGrid>\n    </div>\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\nimport { addWeeks, eachWeekOfInterval, differenceInWeeks } from 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport { Button, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport Paper from '@material-ui/core/Paper';\nimport Switch from '@material-ui/core/Switch';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\nexport interface Range {\n    start: Date,\n    end: Date\n};\n\nexport type ShutdownRangeState = {\n    shutdownWeeks: boolean[];\n    ranges: Range[]\n};\n\ninterface Props {\n    onChange: (ranges: ShutdownRangeState) => void;\n    computeOptimalWeeks: () => void;\n    shutdownWeeks?: boolean[];\n    startDate?: Date;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(4)\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    },\n    marginLeft: {\n        marginLeft: theme.spacing(2)\n    },\n    marginLeftAuto: {\n        marginLeft: 'auto'\n    }\n  }),\n);\n\nexport const ShutdownRange: React.FC<Props> = ({ shutdownWeeks, startDate, computeOptimalWeeks, onChange }) => {\n    const classes = useStyles();\n    const [state, setState] = React.useState({ shutdownWeeks: [], ranges: []})\n    const [isWeekView, setIsWeekView] = React.useState(false);\n\n    const setShutdownState = (ranges: Range[], shutdownWeeks: boolean[]) => {\n        if(!shutdownWeeks) {\n            shutdownWeeks = getShutdownWeeks(ranges, startDate);\n        }\n\n        if(!ranges) {\n            ranges = getShutdownRanges(startDate, shutdownWeeks);\n        }\n\n        setState({ranges, shutdownWeeks});\n    }\n\n    React.useEffect(() => {\n        onChange(state);\n    }, [state]);\n\n    React.useEffect(() => {\n        if((!shutdownWeeks || !startDate)) {\n            return;\n        }\n        setShutdownState(null, shutdownWeeks);\n    }, [shutdownWeeks, startDate]);\n\n    const addRange = () => {\n        let rangeStart = state.ranges[state.ranges.length - 1]?.end || new Date();\n        const range = {\n            start: rangeStart,\n            end: rangeStart\n        }\n        setShutdownState([\n            ...state.ranges,\n            range\n        ], null);\n    }\n\n    const removeRange = (idx: number) => () => {\n        state.ranges.splice(idx, 1);\n        setShutdownState([...state.ranges], null);\n    }\n\n    const changeRange = range => type => date => {\n        range[type] = date;\n        if(type === 'start' && range.end < date) {\n            range.end = date;\n        }\n        setShutdownState([...state.ranges], null);\n    }\n\n    const onWeekViewToggle = (evt) => {\n        setIsWeekView(evt.target.checked);\n    }\n\n    const onWeekToggle = (evt) => {\n        state.shutdownWeeks[Number(evt.target.id)] = evt.target.checked;\n        setShutdownState(null, [...state.shutdownWeeks]);\n    }\n\n    const renderRanges = () => state.ranges.map((range, idx) => <Grid container item direction=\"row\" spacing={4} alignItems=\"center\">\n        <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('start')}  value={range.start} label='Start'></KeyboardDatePicker></Grid>\n        <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('end')}  value={range.end} label='End'></KeyboardDatePicker></Grid>\n        <Grid item>\n            <IconButton onClick={removeRange(idx)} aria-label=\"delete\">\n                <DeleteIcon />\n            </IconButton>\n        </Grid>\n    </Grid>);\n\n    const renderWeeks = () => <Grid item container direction=\"row\">\n        {state.shutdownWeeks.map((week, idx) => \n            <Grid item>\n                <Grid container alignItems=\"center\">\n                    <Switch color=\"primary\" id={idx + ''} checked={week} onChange={onWeekToggle}></Switch>\n                    <Typography variant=\"caption\">{`Week ${idx + 1}`}</Typography>\n                </Grid>\n            </Grid>\n        )}\n    </Grid>\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={2}>\n                <Grid container alignItems=\"center\" justify=\"space-between\">\n                    <Tooltip title=\"Weeks when we will have a shutdown.\">\n                        <Typography className={classes.marginBottom}>Shutdown Dates</Typography>\n                    </Tooltip>\n                    <Grid item>\n                        <Grid container alignItems=\"center\">\n                            <Checkbox color=\"primary\" onChange={onWeekViewToggle}></Checkbox>\n                            <Typography variant=\"body2\">Week view</Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                {(isWeekView) ? renderWeeks() : renderRanges()}\n                <Grid container item className={classes.marginTop} spacing={2} alignItems=\"center\">\n                    <Button variant=\"contained\" startIcon={<AddIcon />} onClick={addRange}>Add</Button>\n                    <Button variant=\"contained\" className={classes.marginLeft}\n                        startIcon={<RotateLeftIcon />} onClick={_ => setShutdownState([], null)}>Reset</Button>\n                    <Button className={classes.marginLeft}\n                        variant=\"contained\" startIcon={<DateRangeIcon />} onClick={computeOptimalWeeks}>Optimize Shutdowns</Button>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\n\nfunction getShutdownRanges(startDate: Date, shutdownWeeks: boolean[]): Range[] {\n    let ranges = [];\n    let currentRange = null;\n    for(let i = 0; i<shutdownWeeks.length; i++) {\n        if(!shutdownWeeks[i] && currentRange) {\n            ranges.push(currentRange);\n            currentRange = null;\n        }\n\n        if(shutdownWeeks[i]) {\n            if(currentRange) {\n                currentRange.end = addWeeks(currentRange.end, 1);\n            } else {\n                currentRange = {\n                    start: addWeeks(startDate, i),\n                    end: addWeeks(startDate, i+1)\n                }\n            }\n        }\n    }\n    if(currentRange) {\n        ranges.push(currentRange);\n    }\n\n    return ranges;\n}\n\nfunction getShutdownWeeks(ranges, startDate) {\n    return ranges.reduce((shutdown, range) => {\n        let start = differenceInWeeks(range.start, startDate);\n        let end = differenceInWeeks(range.end, startDate);\n        for(let i = start; i < end; i++) {\n            shutdown[i] = true;\n        }\n        return shutdown;\n    }, Array(104).fill(false));\n}\n\nexport function getNumShutdownWeeks(shutdownWeeks: boolean[]) {\n    return shutdownWeeks.reduce((numWeeks, shutdown) => {\n        return numWeeks + ((shutdown) ? 1 : 0);\n    }, 0)\n}","import React, { useReducer, useEffect } from 'react';\nimport shortNum from 'short-number';\nimport { format, differenceInCalendarWeeks } from 'date-fns';\nimport { SimulatorInputState, generateData} from './data-generator';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\nenum Actions {\n    CHANGE_CONTROL,\n    CHANGE_SHUTDOWN\n}\n\nconst reducer = (state: SimulatorInputState, action) => {\n    switch(action.type) {\n        case Actions.CHANGE_CONTROL:\n            return {\n                ...state,\n                controls: action.controls\n            }\n        case Actions.CHANGE_SHUTDOWN:\n            return {\n                ...state,\n                shutdowns: action.shutdowns\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const useGenerateConfig = (): [SimulatorInputState, any, any, any] => {\n    const [state, dispatch] = useReducer(reducer, {\n        controls: {},\n        shutdowns: {\n            ranges: [],\n            shutdownWeeks: []\n        }\n    });\n    return [\n        state,\n        generateChartConfig(state),\n        (controls) => dispatch({type: Actions.CHANGE_CONTROL, controls}),\n        (shutdowns) => dispatch({type: Actions.CHANGE_SHUTDOWN, shutdowns})\n    ];\n}\n\n\n\n\nfunction generateChartConfig(state: SimulatorInputState) { \n    // TODO: Generate chart config here.\n    let {weeks, lastWeekNum} = generateData(state);\n    let weeksToGo = getWeeksToGo(lastWeekNum, state.controls.infectionStartDate);\n    let series = createSeries(weeks);\n    const options = {\n        subtitle: {\n            text: ''\n        },\n        title: {\n          text: ``,\n        },\n        yAxis: {\n            type: 'logarithmic',\n            title: {\n                text: 'Number of people'\n            },\n        },\n        xAxis: {\n            type: 'datetime',\n            title: {\n                text: 'Date'\n            },\n            gridLineWidth: 1,\n            plotBands: createShutdownBands(state.shutdowns.ranges),\n            plotLines: [{\n                value: weeks[lastWeekNum]?.weekStartDate,\n                color: '#013220'\n            }]\n        },\n        plotOptions: {\n            line: {\n                lineWidth: 5\n            }\n        },\n        tooltip: {\n            formatter: function () {\n                return `<b>${this.series.name}</b>:${shortNum(this.y)} <br>` +\n                    `${format(this.x, 'do MMM y')}`;\n            }\n        },\n        series\n    }\n\n    console.log(options);\n    return {\n        config: options,\n        weeks,\n        weeksToGo\n    };\n}\n\nfunction createShutdownBands(shutdowns: {start: Date, end: Date}[]) {\n    return shutdowns.map(s => {\n        return {\n            color: '#ffcccb',\n            from: s.start,\n            to: s.end\n        };\n    })\n}\n\n\nfunction createSeries(data) {\n    let series = {};\n    data.forEach(obj => {\n        Object.keys(obj).forEach(key => {\n            series[key] = series[key] || {name: key, data: [], visible: false};\n            series[key].data.push({\n                x: obj.weekStartDate,\n                y: obj[key]\n            });\n        });\n    });\n    delete series['week'];\n    delete series['weekNum'];\n    delete series['healthy'];\n    delete series['weekStartDate'];\n    delete series['recovered'];\n    delete series['isShutdown'];\n    delete series['currentlyInfected'];\n\n    series['hospitalized'].visible = true;\n    series['dead'].visible = true;\n    series['newInfected'].visible = true;\n    return Object.values(series);\n}\n\nfunction getWeeksToGo(lastWeekNum, startDate) {\n    const currentWeekNum = differenceInCalendarWeeks(new Date(), startDate);\n    return lastWeekNum - currentWeekNum;\n}","import { addWeeks, isWithinInterval } from 'date-fns';\nimport { ControlState } from '../controls/controls';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\nexport interface SimulatorInputState {\n    controls: ControlState;\n    shutdowns: ShutdownRangeState;\n}\n\nexport class Week {\n    weekStartDate: Date;\n    weekNum: number;\n    healthy: number = 0;\n    newInfected: number = 0;\n    totalInfected: number = 0;\n    currentlyInfected = 0;\n    recovered = 0;\n    dead = 0;\n    hospitalized = 0;\n    isShutdown: boolean = false;\n\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n\nexport function generateData(state: SimulatorInputState) {\n    let {\n        totalPopulation,\n        infectionStartDate,\n        R0,\n        shutdownR0,\n        mortalityRate,\n        mortalityRateOverflow,\n        initialNumberOfCases,\n        hospitalizationRate,\n        totalHospitalBeds,\n        hospitalStayInWeeks } = state.controls;\n    mortalityRate = mortalityRate / 100;\n    mortalityRateOverflow = mortalityRateOverflow / 100;\n    hospitalizationRate = hospitalizationRate / 100;\n\n    let weeks = [new Week({\n        weekStartDate: infectionStartDate,\n        weekNum: 0,\n        healthy: totalPopulation - initialNumberOfCases,\n        newInfected: initialNumberOfCases,\n        totalInfected: initialNumberOfCases,\n        currentlyInfected: initialNumberOfCases,\n        recovered: 0,\n        dead: 0,\n        hospitalized: 0\n    })];\n    let lastWeekNum;\n\n    for(let i=1; i<104; i++) {\n        weeks[i] = new Week();\n        weeks[i].weekStartDate = addWeeks(infectionStartDate, i);\n        weeks[i].weekNum = i;\n        weeks[i].isShutdown = state.shutdowns.shutdownWeeks[i];\n        let r = (weeks[i].isShutdown)\n            ? shutdownR0 \n            : R0;\n\n        let fractionHealthy = (weeks[i-1].healthy) / totalPopulation;\n        let mortality = (weeks[i-1].hospitalized < totalHospitalBeds)\n            ? mortalityRate\n            : weightedAverage(mortalityRate, mortalityRateOverflow,\n                totalHospitalBeds, weeks[i-1].hospitalized - totalHospitalBeds);\n\n        weeks[i].newInfected = Math.floor(weeks[i-1].newInfected * r * fractionHealthy);\n        weeks[i].currentlyInfected = Math.floor(weeks[i].newInfected + weeks[i-1].newInfected\n                + ((i >= 2) ? weeks[i-2].newInfected : 0));\n        weeks[i].totalInfected = weeks[i-1].totalInfected + weeks[i].newInfected;\n\n        // 3 weeks later patients either die or recover.\n        if(i >= 3) {\n            weeks[i].dead = Math.floor(weeks[i-1].dead + weeks[i - 3].newInfected * mortality);\n            weeks[i].recovered = Math.floor(weeks[i-1].recovered + (weeks[i -3].newInfected *  ( 1 - mortality)));\n        }\n        if(i > 2) {\n            weeks[i].hospitalized =  Math.floor(weeks[i -2].newInfected * hospitalizationRate * hospitalStayInWeeks);\n        }\n        weeks[i].healthy = totalPopulation - (weeks[i].currentlyInfected + weeks[i].recovered + weeks[i].dead); \n\n        if(weeks[i].currentlyInfected === 0 && !lastWeekNum) {\n            lastWeekNum = i;\n        }\n    }\n\n    return {\n        lastWeekNum,\n        weeks\n    };\n}\n\nexport function weightedAverage(p0: number, p1: number, w0: number, w1: number) {\n    return ((p0 * w0) + (p1 * w1)) / (w0 + w1);\n}\n\nfunction isShutdown(week, shutdowns) {\n    try {\n        return  shutdowns.some(shutdown => isWithinInterval(week, shutdown));\n    } catch {\n        return false;\n    }\n}","import { ControlState } from '../controls/controls';\nimport { Week, weightedAverage, generateData } from './data-generator';\nimport { differenceInCalendarWeeks } from 'date-fns';\n\nexport function getOptimalWeeks(state: ControlState) {\n    const {\n        totalPopulation,\n        totalHospitalBeds,\n        shutdownR0,\n        infectionStartDate,\n        initialNumberOfCases\n    } = state;\n\n    let weeks = [new Week({\n        newInfected: initialNumberOfCases,\n        totalInfected: initialNumberOfCases,\n        currentlyInfected: initialNumberOfCases,\n        healthy: totalPopulation - initialNumberOfCases\n    })];\n\n    let shutdown = Array(104).fill(false);\n\n    if(shutdownR0 < 1) {\n        return getDeprecatingOptimalWeeks(state);\n    }\n\n\n    for(let i = 1; i< 104; i++) {\n        let current: Week, next: Week, next2: Week;\n        current = computeNextWeek(state, false,\n            weeks[i - 1], (i >= 2) ? weeks[i-2] : null, (i >= 3) ? weeks[i - 3] : null);\n        next = computeNextWeek(state, true,\n            current, weeks[i-1], (i >= 2) ? weeks[i-2] : null);\n        next2 = computeNextWeek(state, true,\n            next, current, weeks[i-1]);\n\n        if(current.hospitalized > totalHospitalBeds ||\n            next.hospitalized > totalHospitalBeds ||\n            next2.hospitalized > totalHospitalBeds) {\n                shutdown[i] = true;\n                weeks[i] = computeNextWeek(state, shutdown[i],\n                    weeks[i - 1], (i >= 2) ? weeks[i -2] : null, (i >= 3) ? weeks[i - 3] : null);\n        } else {\n            shutdown[i] = false;\n            weeks[i] = current;\n        }\n    }\n\n    return shutdown;\n}\n\nfunction computeNextWeek(state: ControlState, shutdown: boolean, prev: Week, prev2: Week, prev3: Week): Week {\n    let {\n        R0,\n        shutdownR0,\n        totalPopulation,\n        totalHospitalBeds,\n        mortalityRate,\n        mortalityRateOverflow,\n        hospitalizationRate\n    } = state;\n    mortalityRate = mortalityRate / 100;\n    mortalityRateOverflow = mortalityRateOverflow / 100;\n    hospitalizationRate = hospitalizationRate / 100;\n\n    let result: Week = new Week();\n    const r = (shutdown) ? shutdownR0 : R0;\n    const fractionHealthy = prev.healthy / totalPopulation;\n\n    // Mortality depends on how much overflow there is in the hospitals compared capacity\n    let mortality = (prev.hospitalized < totalHospitalBeds) ? mortalityRate :\n        weightedAverage(mortalityRate, mortalityRateOverflow,\n        totalHospitalBeds, prev.hospitalized - totalHospitalBeds);\n    \n    result.newInfected = Math.round(prev.newInfected * r * fractionHealthy);\n    // Last 2 week + current week's newly infected are still infected. \n    result.currentlyInfected = result.newInfected + prev.newInfected + ((prev2 != null) ? prev2.newInfected : 0);\n    result.totalInfected = prev.totalInfected + result.newInfected;\n    // 3 weeks later patients either die or recover.\n    if (prev3 != null) {\n        result.dead = prev.dead + prev3.newInfected * mortality;\n        result.recovered = prev.recovered + (prev3.newInfected *  ( 1 - mortality));\n    }\n    // We are considering that patients are in hopsital in their third week.\n    if (prev2 != null) {\n        result.hospitalized =  prev2.newInfected * hospitalizationRate;\n    } \n    result.healthy = totalPopulation - (result.currentlyInfected + result.recovered + result.dead);\n    return result; \n}\n\nfunction getDeprecatingOptimalWeeks(state: ControlState) {\n    let {\n        R0,\n        shutdownR0,\n        totalPopulation,\n        totalHospitalBeds,\n        infectionStartDate,\n        mortalityRateOverflow,\n        hospitalizationRate\n    } = state;\n    let { weeks } = generateData({ controls: state, shutdowns: {shutdownWeeks: [], ranges: []}});\n    let currentWeekNum = differenceInCalendarWeeks(new Date(), infectionStartDate);\n    let currentNewInfected = weeks[currentWeekNum - 1].newInfected;\n\n    let shutdownsToZero = Math.ceil(-Math.log(currentNewInfected) / Math.log(shutdownR0));\n\n    let shutdown = Array(104).fill(false);\n    for(let i = currentWeekNum; i<currentWeekNum + shutdownsToZero - 1; i++) {\n        shutdown[i] = true;\n    }\n\n    return shutdown;\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\ninterface Props {\n    title: string;\n    value: string;\n    tooltip: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(2),\n        paddingRight: theme.spacing(4),\n        flexGrow: 1\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    },\n    marginLeft: {\n        marginLeft: theme.spacing(2)\n    },\n    marginLeftAuto: {\n        marginLeft: 'auto'\n    }\n  }),\n);\n\nexport const Headline: React.FC<Props> = ({ title, value, tooltip }) => {\n    const classes = useStyles();\n\n    return <Paper className={classes.root} elevation={3}>\n        <Tooltip title={tooltip}>\n            <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={3}>\n                <Grid item>\n                    <Typography variant=\"body1\">{title}</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h5\">{value}</Typography>\n                </Grid>\n            </Grid>\n        </Tooltip>\n    </Paper>\n}","import React from 'react';\nimport 'date-fns';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport {Controls} from '../controls/controls';\nimport {Chart} from '../chart/chart';\nimport { Table } from '../table/table';\nimport {ShutdownRange, getNumShutdownWeeks} from '../shudown-range/shutdown-range';\nimport {useGenerateConfig} from './use-generate-config';\nimport {getOptimalWeeks} from './optimal-weeks-generator';\nimport {\n    MuiPickersUtilsProvider,\n } from '@material-ui/pickers';\nimport shortNum from 'short-number';\nimport Switch from '@material-ui/core/Switch';\nimport { Paper, Typography } from '@material-ui/core';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Headline } from '../headline/headline';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    grow: {\n        flexGrow: 1,\n        flexBasis: 0,\n        minHeight: 0\n    },\n    contentContainer: {\n        flex: '1 0 0',\n        height: 720,\n        marginBottom: theme.spacing(2)\n    },\n    content: {\n        padding: theme.spacing(4),\n        flex: '1 1 0',\n        minHeight: 0,\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n  }),\n);\n\nconst TABLE_COLUMNS = ['weekNum', 'healthy', 'newInfected', 'totalInfected', 'currentlyInfected', 'dead', 'hospitalized'];\nconst initialShutdownWeeks = Array(104).fill(false);\ninitialShutdownWeeks[10] = true;\ninitialShutdownWeeks[11] = true;\ninitialShutdownWeeks[12] = true;\ninitialShutdownWeeks[20] = true;\ninitialShutdownWeeks[21] = true;\ninitialShutdownWeeks[22] = true;\n\nexport const Simulator: React.FC = () => {\n    const classes = useStyles();\n    const [\n        state, \n        {config, weeks, weeksToGo},\n        onControlChange, \n        onShutdownChange] = useGenerateConfig();\n    const [optimalWeeks, setOptimalWeeks] = React.useState<boolean[]>(initialShutdownWeeks);\n    const [isTableView, setIsTableView] = React.useState(false);\n\n    const computeOptimalWeeks = () => {\n        setOptimalWeeks(getOptimalWeeks(state.controls));\n    }\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container spacing={2} direction='row'>\n                <Grid item >\n                    <Controls onChange={onControlChange}></Controls>\n                </Grid>\n                <Grid container item direction=\"column\" className={classes.grow} spacing={2}>\n                    <Grid item >\n                        <ShutdownRange\n                            shutdownWeeks={optimalWeeks}\n                            startDate={state.controls.infectionStartDate}\n                            computeOptimalWeeks={computeOptimalWeeks}\n                            onChange={onShutdownChange}></ShutdownRange>\n                    </Grid>\n                    <Grid item container\n                        direction=\"row\"  spacing={2}>\n                        <Grid item className={classes.grow}> \n                            <Headline title=\"Total Shutdown\"\n                                tooltip=\"Total number of weeks of shutdown\"\n                                value={`${getNumShutdownWeeks(state.shutdowns.shutdownWeeks)} weeks`}></Headline>\n                        </Grid>\n                        <Grid item className={classes.grow}> \n                            <Headline \n                                tooltip=\"Number of weeks to complete irradication of coronavirus.\"\n                                title=\"Time before the virus dies\" value={(!isNaN(weeksToGo)) ? `${weeksToGo} weeks` : `> 2 years`}></Headline>\n                        </Grid>\n                        <Grid item className={classes.grow}>\n                            <Headline title=\"Deaths\"\n                                 tooltip=\"Number of people expected to die.\"\n                                 value={shortNum(weeks[weeks.length - 1].dead)}></Headline>\n                        </Grid>\n                    </Grid>\n                    <Grid item container direction=\"column\" className={classes.contentContainer}>\n                        <Paper elevation={3} className={classes.content}>\n                            <Grid container direction=\"column\" wrap=\"nowrap\" className={classes.grow}>\n                                <Grid item style={{ marginLeft: 'auto'}}>\n                                    <Typography variant=\"caption\">Table View</Typography>\n                                    <Switch color=\"primary\" id='switcher' checked={isTableView} onChange={() => setIsTableView(!isTableView)}></Switch>\n                                </Grid>\n                                <Grid item className={classes.grow} style={{ display: 'flex', flexDirection: 'column'}}>\n                                    {(isTableView) ? <Table\n                                        columns={TABLE_COLUMNS} \n                                        data={weeks}></Table>\n                                        : <Chart config={config}></Chart>}\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport qs from 'query-string';\nimport './App.css';\n\nimport {Simulator} from './components/simulator/simulator';\nimport { Container } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    container: {\n      paddingTop: theme.spacing(2)\n    }\n  }),\n);\nconst urlParams = qs.parse(window.location.search);\n\nfunction App() {\n  const classes = useStyles();\n  const isEmbed = !!urlParams.embed;\n\n  return (\n    <div className=\"App\">\n      {!isEmbed && <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            COVID Simulator\n          </Typography>\n        </Toolbar>\n      </AppBar>}\n      <Container maxWidth='lg' className={classes.container}>\n        <Simulator />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.        xssadsaasdasdasdasdasdasdasdasdasd\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}